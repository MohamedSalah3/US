
US.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080006c  0080006c  00000bb8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001310  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001036  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000549  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  0000298f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000860  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134a  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_1>
   8:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_2>
   c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_3>
  10:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_4>
  14:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_5>
  18:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_6>
  1c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_7>
  20:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_8>
  24:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_9>
  28:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__vector_10>
  2c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_11>
  30:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_12>
  34:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_13>
  38:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_14>
  3c:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_15>
  40:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_16>
  44:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_17>
  48:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__vector_18>
  4c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_19>
  50:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 05 	call	0xafc	; 0xafc <main>
  8a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
  92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	88 23       	and	r24, r24
  98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
  9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
  a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
  b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
  b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	80 95       	com	r24
  be:	89 23       	and	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
  c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
  c6:	97 b3       	in	r25, 0x17	; 23
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	80 95       	com	r24
  cc:	89 23       	and	r24, r25
  ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
  d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
  d4:	94 b3       	in	r25, 0x14	; 20
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
  e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
  e2:	91 b3       	in	r25, 0x11	; 17
  e4:	81 81       	ldd	r24, Z+1	; 0x01
  e6:	80 95       	com	r24
  e8:	89 23       	and	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
  ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
  f0:	80 81       	ld	r24, Z
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
 102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
 104:	9a b3       	in	r25, 0x1a	; 26
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	89 2b       	or	r24, r25
 10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
 10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
 110:	97 b3       	in	r25, 0x17	; 23
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	89 2b       	or	r24, r25
 116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
 11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
 11c:	94 b3       	in	r25, 0x14	; 20
 11e:	81 81       	ldd	r24, Z+1	; 0x01
 120:	89 2b       	or	r24, r25
 122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
 126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
 128:	91 b3       	in	r25, 0x11	; 17
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	89 2b       	or	r24, r25
 12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
 132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
 13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
 140:	44 23       	and	r20, r20
 142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
 144:	4f 3f       	cpi	r20, 0xFF	; 255
 146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
 148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
 14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
 15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
 168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	60 95       	com	r22
 16e:	68 23       	and	r22, r24
 170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
 174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
 176:	85 b3       	in	r24, 0x15	; 21
 178:	60 95       	com	r22
 17a:	68 23       	and	r22, r24
 17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
 180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
 182:	82 b3       	in	r24, 0x12	; 18
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
 18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
 19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
 1a0:	8b b3       	in	r24, 0x1b	; 27
 1a2:	68 2b       	or	r22, r24
 1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
 1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	68 2b       	or	r22, r24
 1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
 1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	68 2b       	or	r22, r24
 1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
 1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	68 2b       	or	r22, r24
 1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
 1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
 1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
 1d4:	fa 01       	movw	r30, r20

switch (GPIO)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
 1e8:	89 b3       	in	r24, 0x19	; 25
 1ea:	68 23       	and	r22, r24
 1ec:	60 83       	st	Z, r22
	break;
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
 1f0:	86 b3       	in	r24, 0x16	; 22
 1f2:	68 23       	and	r22, r24
 1f4:	60 83       	st	Z, r22
	break;
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
 1f8:	83 b3       	in	r24, 0x13	; 19
 1fa:	68 23       	and	r22, r24
 1fc:	60 83       	st	Z, r22
	break;
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
 200:	80 b3       	in	r24, 0x10	; 16
 202:	68 23       	and	r22, r24
 204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
}


}
 210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
 222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	68 27       	eor	r22, r24
 228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
 22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	68 27       	eor	r22, r24
 232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		break;
 236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	68 27       	eor	r22, r24
 23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
 242:	82 b3       	in	r24, 0x12	; 18
 244:	68 27       	eor	r22, r24
 246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
		break;
 24a:	08 95       	ret
		default:
		ret=E_NOK;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
 24e:	08 95       	ret

00000250 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ec 01       	movw	r28, r24
	uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
 256:	0e 94 49 02 	call	0x492	; 0x492 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
 25a:	88 81       	ld	r24, Y
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	41 f0       	breq	.+16     	; 0x270 <Icu_Init+0x20>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	18 f0       	brcs	.+6      	; 0x26a <Icu_Init+0x1a>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	49 f4       	brne	.+18     	; 0x27a <Icu_Init+0x2a>
 268:	06 c0       	rjmp	.+12     	; 0x276 <Icu_Init+0x26>
{
case ICU_CH0:
EX_interrupt_enable0();
 26a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <EX_interrupt_enable0>
break;
 26e:	05 c0       	rjmp	.+10     	; 0x27a <Icu_Init+0x2a>
case ICU_CH1:
EX_interrupt_enable1();
 270:	0e 94 56 02 	call	0x4ac	; 0x4ac <EX_interrupt_enable1>
break;
 274:	02 c0       	rjmp	.+4      	; 0x27a <Icu_Init+0x2a>
case ICU_CH2:
EX_interrupt_enable2();
 276:	0e 94 4d 02 	call	0x49a	; 0x49a <EX_interrupt_enable2>
break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	51 f0       	breq	.+20     	; 0x294 <Icu_Init+0x44>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	18 f0       	brcs	.+6      	; 0x28a <Icu_Init+0x3a>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	89 f4       	brne	.+34     	; 0x2aa <Icu_Init+0x5a>
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <Icu_Init+0x52>
{
	case ICU_TIMER_CH0:
		//Enable Timer0
		TCCR0=0x03;
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	83 bf       	out	0x33, r24	; 51
		TIMSK=0x01;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	89 bf       	out	0x39, r24	; 57
		break;
 292:	0b c0       	rjmp	.+22     	; 0x2aa <Icu_Init+0x5a>
	case ICU_TIMER_CH1:
		TCCR1=0x0005;
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9f bd       	out	0x2f, r25	; 47
 29a:	8e bd       	out	0x2e, r24	; 46
		TIMSK=0x04;
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	89 bf       	out	0x39, r24	; 57
		break;
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <Icu_Init+0x5a>
	case ICU_TIMER_CH2:
		TCCR2=0x07;
 2a2:	87 e0       	ldi	r24, 0x07	; 7
 2a4:	85 bd       	out	0x25, r24	; 37
		TIMSK=0x04;
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	89 bf       	out	0x39, r24	; 57
		break;
}

return Ret;
}
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
 2b2:	fa 01       	movw	r30, r20
uint8_t Ret=0;
switch(Icu_Channel)
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	49 f0       	breq	.+18     	; 0x2ca <Icu_ReadTime+0x18>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	18 f0       	brcs	.+6      	; 0x2c2 <Icu_ReadTime+0x10>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	71 f4       	brne	.+28     	; 0x2dc <Icu_ReadTime+0x2a>
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <Icu_ReadTime+0x24>
{
	case ICU_TIMER_CH0:
	TCCR0|=0x03;
 2c2:	83 b7       	in	r24, 0x33	; 51
 2c4:	83 60       	ori	r24, 0x03	; 3
 2c6:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
	break;
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <Icu_ReadTime+0x2a>
	case ICU_TIMER_CH1:
	TCCR1|=0x0005;
 2ca:	8e b5       	in	r24, 0x2e	; 46
 2cc:	9f b5       	in	r25, 0x2f	; 47
 2ce:	85 60       	ori	r24, 0x05	; 5
 2d0:	9f bd       	out	0x2f, r25	; 47
 2d2:	8e bd       	out	0x2e, r24	; 46
	Ret=E_OK;	
	break;
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <Icu_ReadTime+0x2a>
	case ICU_TIMER_CH2:
	TCCR2|=0x07;
 2d6:	85 b5       	in	r24, 0x25	; 37
 2d8:	87 60       	ori	r24, 0x07	; 7
 2da:	85 bd       	out	0x25, r24	; 37
	default:
	Ret=E_NOK;
	break;
}  

switch(Icu_EdgeToEdge)
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	f9 f0       	breq	.+62     	; 0x31e <Icu_ReadTime+0x6c>
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	18 f0       	brcs	.+6      	; 0x2ea <Icu_ReadTime+0x38>
 2e4:	62 30       	cpi	r22, 0x02	; 2
 2e6:	b9 f5       	brne	.+110    	; 0x356 <Icu_ReadTime+0xa4>
 2e8:	28 c0       	rjmp	.+80     	; 0x33a <Icu_ReadTime+0x88>
{
	case ICU_RISE_TO_RISE:
	*Icu_Time=Timer_High+Timer_Low;
 2ea:	80 91 70 00 	lds	r24, 0x0070
 2ee:	90 91 71 00 	lds	r25, 0x0071
 2f2:	a0 91 72 00 	lds	r26, 0x0072
 2f6:	b0 91 73 00 	lds	r27, 0x0073
 2fa:	40 91 6c 00 	lds	r20, 0x006C
 2fe:	50 91 6d 00 	lds	r21, 0x006D
 302:	60 91 6e 00 	lds	r22, 0x006E
 306:	70 91 6f 00 	lds	r23, 0x006F
 30a:	84 0f       	add	r24, r20
 30c:	95 1f       	adc	r25, r21
 30e:	a6 1f       	adc	r26, r22
 310:	b7 1f       	adc	r27, r23
 312:	80 83       	st	Z, r24
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	a2 83       	std	Z+2, r26	; 0x02
 318:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
	break;
 31c:	1d c0       	rjmp	.+58     	; 0x358 <Icu_ReadTime+0xa6>
	case ICU_RISE_TO_FALL:
	*Icu_Time=Timer_High;
 31e:	80 91 70 00 	lds	r24, 0x0070
 322:	90 91 71 00 	lds	r25, 0x0071
 326:	a0 91 72 00 	lds	r26, 0x0072
 32a:	b0 91 73 00 	lds	r27, 0x0073
 32e:	80 83       	st	Z, r24
 330:	91 83       	std	Z+1, r25	; 0x01
 332:	a2 83       	std	Z+2, r26	; 0x02
 334:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
	break;
 338:	0f c0       	rjmp	.+30     	; 0x358 <Icu_ReadTime+0xa6>
	case ICU_FALE_TO_RISE:
	*Icu_Time=Timer_Low;
 33a:	80 91 6c 00 	lds	r24, 0x006C
 33e:	90 91 6d 00 	lds	r25, 0x006D
 342:	a0 91 6e 00 	lds	r26, 0x006E
 346:	b0 91 6f 00 	lds	r27, 0x006F
 34a:	80 83       	st	Z, r24
 34c:	91 83       	std	Z+1, r25	; 0x01
 34e:	a2 83       	std	Z+2, r26	; 0x02
 350:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
 352:	80 e0       	ldi	r24, 0x00	; 0
	break;
 354:	01 c0       	rjmp	.+2      	; 0x358 <Icu_ReadTime+0xa6>
	
	default:
	Ret=E_NOK;
 356:	81 e0       	ldi	r24, 0x01	; 1
	break;
}
*Icu_Time=*Icu_Time * 4;
 358:	40 81       	ld	r20, Z
 35a:	51 81       	ldd	r21, Z+1	; 0x01
 35c:	62 81       	ldd	r22, Z+2	; 0x02
 35e:	73 81       	ldd	r23, Z+3	; 0x03
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	66 1f       	adc	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	66 1f       	adc	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	40 83       	st	Z, r20
 372:	51 83       	std	Z+1, r21	; 0x01
 374:	62 83       	std	Z+2, r22	; 0x02
 376:	73 83       	std	Z+3, r23	; 0x03
return Ret;
}
 378:	08 95       	ret

0000037a <EXTI>:

void EXTI(void)
{	u32_sgv_TimerVal=TCNT0+u8_ovf_happend*255;
 37a:	42 b7       	in	r20, 0x32	; 50
 37c:	20 91 7c 00 	lds	r18, 0x007C
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	92 2f       	mov	r25, r18
 384:	88 27       	eor	r24, r24
 386:	82 1b       	sub	r24, r18
 388:	93 0b       	sbc	r25, r19
 38a:	84 0f       	add	r24, r20
 38c:	91 1d       	adc	r25, r1
 38e:	aa 27       	eor	r26, r26
 390:	97 fd       	sbrc	r25, 7
 392:	a0 95       	com	r26
 394:	ba 2f       	mov	r27, r26
 396:	80 93 7d 00 	sts	0x007D, r24
 39a:	90 93 7e 00 	sts	0x007E, r25
 39e:	a0 93 7f 00 	sts	0x007F, r26
 3a2:	b0 93 80 00 	sts	0x0080, r27
	u8_ovf_happend=0;
 3a6:	10 92 7c 00 	sts	0x007C, r1
		if(READBIT(MCUCSR,6))
 3aa:	84 b7       	in	r24, 0x34	; 52
 3ac:	82 95       	swap	r24
 3ae:	86 95       	lsr	r24
 3b0:	86 95       	lsr	r24
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	80 ff       	sbrs	r24, 0
 3b6:	30 c0       	rjmp	.+96     	; 0x418 <EXTI+0x9e>
		{
		u32_Time_rising_edge=u32_sgv_TimerVal;
 3b8:	80 91 7d 00 	lds	r24, 0x007D
 3bc:	90 91 7e 00 	lds	r25, 0x007E
 3c0:	a0 91 7f 00 	lds	r26, 0x007F
 3c4:	b0 91 80 00 	lds	r27, 0x0080
 3c8:	80 93 78 00 	sts	0x0078, r24
 3cc:	90 93 79 00 	sts	0x0079, r25
 3d0:	a0 93 7a 00 	sts	0x007A, r26
 3d4:	b0 93 7b 00 	sts	0x007B, r27
		Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
 3d8:	80 91 78 00 	lds	r24, 0x0078
 3dc:	90 91 79 00 	lds	r25, 0x0079
 3e0:	a0 91 7a 00 	lds	r26, 0x007A
 3e4:	b0 91 7b 00 	lds	r27, 0x007B
 3e8:	40 91 74 00 	lds	r20, 0x0074
 3ec:	50 91 75 00 	lds	r21, 0x0075
 3f0:	60 91 76 00 	lds	r22, 0x0076
 3f4:	70 91 77 00 	lds	r23, 0x0077
 3f8:	84 1b       	sub	r24, r20
 3fa:	95 0b       	sbc	r25, r21
 3fc:	a6 0b       	sbc	r26, r22
 3fe:	b7 0b       	sbc	r27, r23
 400:	80 93 6c 00 	sts	0x006C, r24
 404:	90 93 6d 00 	sts	0x006D, r25
 408:	a0 93 6e 00 	sts	0x006E, r26
 40c:	b0 93 6f 00 	sts	0x006F, r27
		/*****************************************/	
		CLEAR_BIT(MCUCSR,6);   /*Make it falling*/
 410:	84 b7       	in	r24, 0x34	; 52
 412:	8f 7b       	andi	r24, 0xBF	; 191
 414:	84 bf       	out	0x34, r24	; 52
 416:	2f c0       	rjmp	.+94     	; 0x476 <EXTI+0xfc>
		/***************************************/
		}else{
			u32_Time_faling_edge=u32_sgv_TimerVal;
 418:	80 91 7d 00 	lds	r24, 0x007D
 41c:	90 91 7e 00 	lds	r25, 0x007E
 420:	a0 91 7f 00 	lds	r26, 0x007F
 424:	b0 91 80 00 	lds	r27, 0x0080
 428:	80 93 74 00 	sts	0x0074, r24
 42c:	90 93 75 00 	sts	0x0075, r25
 430:	a0 93 76 00 	sts	0x0076, r26
 434:	b0 93 77 00 	sts	0x0077, r27
			Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
 438:	80 91 74 00 	lds	r24, 0x0074
 43c:	90 91 75 00 	lds	r25, 0x0075
 440:	a0 91 76 00 	lds	r26, 0x0076
 444:	b0 91 77 00 	lds	r27, 0x0077
 448:	40 91 78 00 	lds	r20, 0x0078
 44c:	50 91 79 00 	lds	r21, 0x0079
 450:	60 91 7a 00 	lds	r22, 0x007A
 454:	70 91 7b 00 	lds	r23, 0x007B
 458:	84 1b       	sub	r24, r20
 45a:	95 0b       	sbc	r25, r21
 45c:	a6 0b       	sbc	r26, r22
 45e:	b7 0b       	sbc	r27, r23
 460:	80 93 70 00 	sts	0x0070, r24
 464:	90 93 71 00 	sts	0x0071, r25
 468:	a0 93 72 00 	sts	0x0072, r26
 46c:	b0 93 73 00 	sts	0x0073, r27
			/*********************************/	
			SET_BIT(MCUCSR,6);		/*Make it Rising*/
 470:	84 b7       	in	r24, 0x34	; 52
 472:	80 64       	ori	r24, 0x40	; 64
 474:	84 bf       	out	0x34, r24	; 52
			/********************************/
			}	

UDR=Timer_High;
 476:	80 91 70 00 	lds	r24, 0x0070
 47a:	90 91 71 00 	lds	r25, 0x0071
 47e:	a0 91 72 00 	lds	r26, 0x0072
 482:	b0 91 73 00 	lds	r27, 0x0073
 486:	8c b9       	out	0x0c, r24	; 12
}
 488:	08 95       	ret

0000048a <timer_interrupt>:
void timer_interrupt(void)
{
	u8_ovf_happend=1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 7c 00 	sts	0x007C, r24
 490:	08 95       	ret

00000492 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
 492:	8f b7       	in	r24, 0x3f	; 63
 494:	80 68       	ori	r24, 0x80	; 128
 496:	8f bf       	out	0x3f, r24	; 63
}
 498:	08 95       	ret

0000049a <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
 49a:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
 49c:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
 49e:	8b b7       	in	r24, 0x3b	; 59
 4a0:	80 62       	ori	r24, 0x20	; 32
 4a2:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
 4a4:	84 b7       	in	r24, 0x34	; 52
 4a6:	80 64       	ori	r24, 0x40	; 64
 4a8:	84 bf       	out	0x34, r24	; 52
}
 4aa:	08 95       	ret

000004ac <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
 4ac:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
 4ae:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
 4b0:	8b b7       	in	r24, 0x3b	; 59
 4b2:	80 68       	ori	r24, 0x80	; 128
 4b4:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
 4b6:	85 b7       	in	r24, 0x35	; 53
 4b8:	84 60       	ori	r24, 0x04	; 4
 4ba:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
 4bc:	85 b7       	in	r24, 0x35	; 53
 4be:	87 7f       	andi	r24, 0xF7	; 247
 4c0:	85 bf       	out	0x35, r24	; 53
	
}
 4c2:	08 95       	ret

000004c4 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
 4c4:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
 4c6:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
 4c8:	8b b7       	in	r24, 0x3b	; 59
 4ca:	80 64       	ori	r24, 0x40	; 64
 4cc:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
 4ce:	85 b7       	in	r24, 0x35	; 53
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
 4d4:	85 b7       	in	r24, 0x35	; 53
 4d6:	8d 7f       	andi	r24, 0xFD	; 253
 4d8:	85 bf       	out	0x35, r24	; 53
	
}
 4da:	08 95       	ret

000004dc <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
 4dc:	8f b7       	in	r24, 0x3f	; 63
 4de:	8f 77       	andi	r24, 0x7F	; 127
 4e0:	8f bf       	out	0x3f, r24	; 63
}
 4e2:	08 95       	ret

000004e4 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
  INT0_external_interrupt();
 506:	e0 91 95 00 	lds	r30, 0x0095
 50a:	f0 91 96 00 	lds	r31, 0x0096
 50e:	09 95       	icall
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
  INT1_external_interrupt();
 554:	e0 91 9d 00 	lds	r30, 0x009D
 558:	f0 91 9e 00 	lds	r31, 0x009E
 55c:	09 95       	icall
}
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
  INT2_external_interrupt();
 5a2:	e0 91 67 00 	lds	r30, 0x0067
 5a6:	f0 91 68 00 	lds	r31, 0x0068
 5aa:	09 95       	icall
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
TIMER2COMP();
 5f0:	e0 91 a3 00 	lds	r30, 0x00A3
 5f4:	f0 91 a4 00 	lds	r31, 0x00A4
 5f8:	09 95       	icall
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
  TIMER2OVF();
 63e:	e0 91 85 00 	lds	r30, 0x0085
 642:	f0 91 86 00 	lds	r31, 0x0086
 646:	09 95       	icall
}
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	11 24       	eor	r1, r1
 674:	2f 93       	push	r18
 676:	3f 93       	push	r19
 678:	4f 93       	push	r20
 67a:	5f 93       	push	r21
 67c:	6f 93       	push	r22
 67e:	7f 93       	push	r23
 680:	8f 93       	push	r24
 682:	9f 93       	push	r25
 684:	af 93       	push	r26
 686:	bf 93       	push	r27
 688:	ef 93       	push	r30
 68a:	ff 93       	push	r31
  TIMER1CAPT();
 68c:	e0 91 9f 00 	lds	r30, 0x009F
 690:	f0 91 a0 00 	lds	r31, 0x00A0
 694:	09 95       	icall
}
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
TIMER1COMPA();
 6da:	e0 91 8b 00 	lds	r30, 0x008B
 6de:	f0 91 8c 00 	lds	r31, 0x008C
 6e2:	09 95       	icall
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
  TIMER1COMPB();
 728:	e0 91 89 00 	lds	r30, 0x0089
 72c:	f0 91 8a 00 	lds	r31, 0x008A
 730:	09 95       	icall
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
  TIMER1OVF();
 776:	e0 91 a1 00 	lds	r30, 0x00A1
 77a:	f0 91 a2 00 	lds	r31, 0x00A2
 77e:	09 95       	icall
}
 780:	ff 91       	pop	r31
 782:	ef 91       	pop	r30
 784:	bf 91       	pop	r27
 786:	af 91       	pop	r26
 788:	9f 91       	pop	r25
 78a:	8f 91       	pop	r24
 78c:	7f 91       	pop	r23
 78e:	6f 91       	pop	r22
 790:	5f 91       	pop	r21
 792:	4f 91       	pop	r20
 794:	3f 91       	pop	r19
 796:	2f 91       	pop	r18
 798:	0f 90       	pop	r0
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 7a2:	1f 92       	push	r1
 7a4:	0f 92       	push	r0
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	0f 92       	push	r0
 7aa:	11 24       	eor	r1, r1
 7ac:	2f 93       	push	r18
 7ae:	3f 93       	push	r19
 7b0:	4f 93       	push	r20
 7b2:	5f 93       	push	r21
 7b4:	6f 93       	push	r22
 7b6:	7f 93       	push	r23
 7b8:	8f 93       	push	r24
 7ba:	9f 93       	push	r25
 7bc:	af 93       	push	r26
 7be:	bf 93       	push	r27
 7c0:	ef 93       	push	r30
 7c2:	ff 93       	push	r31

  TIMER0COMP();
 7c4:	e0 91 99 00 	lds	r30, 0x0099
 7c8:	f0 91 9a 00 	lds	r31, 0x009A
 7cc:	09 95       	icall
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31

  TIMER0OVF_INT();
 812:	e0 91 65 00 	lds	r30, 0x0065
 816:	f0 91 66 00 	lds	r31, 0x0066
 81a:	09 95       	icall
}
 81c:	ff 91       	pop	r31
 81e:	ef 91       	pop	r30
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	4f 93       	push	r20
 84e:	5f 93       	push	r21
 850:	6f 93       	push	r22
 852:	7f 93       	push	r23
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	af 93       	push	r26
 85a:	bf 93       	push	r27
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
  SPI_STC();
 860:	e0 91 8d 00 	lds	r30, 0x008D
 864:	f0 91 8e 00 	lds	r31, 0x008E
 868:	09 95       	icall
}
 86a:	ff 91       	pop	r31
 86c:	ef 91       	pop	r30
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 88c:	1f 92       	push	r1
 88e:	0f 92       	push	r0
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	0f 92       	push	r0
 894:	11 24       	eor	r1, r1
 896:	2f 93       	push	r18
 898:	3f 93       	push	r19
 89a:	4f 93       	push	r20
 89c:	5f 93       	push	r21
 89e:	6f 93       	push	r22
 8a0:	7f 93       	push	r23
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	af 93       	push	r26
 8a8:	bf 93       	push	r27
 8aa:	ef 93       	push	r30
 8ac:	ff 93       	push	r31
  USART_RXC();
 8ae:	e0 91 83 00 	lds	r30, 0x0083
 8b2:	f0 91 84 00 	lds	r31, 0x0084
 8b6:	09 95       	icall
}
 8b8:	ff 91       	pop	r31
 8ba:	ef 91       	pop	r30
 8bc:	bf 91       	pop	r27
 8be:	af 91       	pop	r26
 8c0:	9f 91       	pop	r25
 8c2:	8f 91       	pop	r24
 8c4:	7f 91       	pop	r23
 8c6:	6f 91       	pop	r22
 8c8:	5f 91       	pop	r21
 8ca:	4f 91       	pop	r20
 8cc:	3f 91       	pop	r19
 8ce:	2f 91       	pop	r18
 8d0:	0f 90       	pop	r0
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	0f 90       	pop	r0
 8d6:	1f 90       	pop	r1
 8d8:	18 95       	reti

000008da <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 8da:	1f 92       	push	r1
 8dc:	0f 92       	push	r0
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	0f 92       	push	r0
 8e2:	11 24       	eor	r1, r1
 8e4:	2f 93       	push	r18
 8e6:	3f 93       	push	r19
 8e8:	4f 93       	push	r20
 8ea:	5f 93       	push	r21
 8ec:	6f 93       	push	r22
 8ee:	7f 93       	push	r23
 8f0:	8f 93       	push	r24
 8f2:	9f 93       	push	r25
 8f4:	af 93       	push	r26
 8f6:	bf 93       	push	r27
 8f8:	ef 93       	push	r30
 8fa:	ff 93       	push	r31
  USART_UDRE();
 8fc:	e0 91 9b 00 	lds	r30, 0x009B
 900:	f0 91 9c 00 	lds	r31, 0x009C
 904:	09 95       	icall
}
 906:	ff 91       	pop	r31
 908:	ef 91       	pop	r30
 90a:	bf 91       	pop	r27
 90c:	af 91       	pop	r26
 90e:	9f 91       	pop	r25
 910:	8f 91       	pop	r24
 912:	7f 91       	pop	r23
 914:	6f 91       	pop	r22
 916:	5f 91       	pop	r21
 918:	4f 91       	pop	r20
 91a:	3f 91       	pop	r19
 91c:	2f 91       	pop	r18
 91e:	0f 90       	pop	r0
 920:	0f be       	out	0x3f, r0	; 63
 922:	0f 90       	pop	r0
 924:	1f 90       	pop	r1
 926:	18 95       	reti

00000928 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 928:	1f 92       	push	r1
 92a:	0f 92       	push	r0
 92c:	0f b6       	in	r0, 0x3f	; 63
 92e:	0f 92       	push	r0
 930:	11 24       	eor	r1, r1
 932:	2f 93       	push	r18
 934:	3f 93       	push	r19
 936:	4f 93       	push	r20
 938:	5f 93       	push	r21
 93a:	6f 93       	push	r22
 93c:	7f 93       	push	r23
 93e:	8f 93       	push	r24
 940:	9f 93       	push	r25
 942:	af 93       	push	r26
 944:	bf 93       	push	r27
 946:	ef 93       	push	r30
 948:	ff 93       	push	r31
  USART_TXC();
 94a:	e0 91 97 00 	lds	r30, 0x0097
 94e:	f0 91 98 00 	lds	r31, 0x0098
 952:	09 95       	icall
}
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	2f 93       	push	r18
 982:	3f 93       	push	r19
 984:	4f 93       	push	r20
 986:	5f 93       	push	r21
 988:	6f 93       	push	r22
 98a:	7f 93       	push	r23
 98c:	8f 93       	push	r24
 98e:	9f 93       	push	r25
 990:	af 93       	push	r26
 992:	bf 93       	push	r27
 994:	ef 93       	push	r30
 996:	ff 93       	push	r31
  ADC_INT();
 998:	e0 91 91 00 	lds	r30, 0x0091
 99c:	f0 91 92 00 	lds	r31, 0x0092
 9a0:	09 95       	icall
}
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	bf 91       	pop	r27
 9a8:	af 91       	pop	r26
 9aa:	9f 91       	pop	r25
 9ac:	8f 91       	pop	r24
 9ae:	7f 91       	pop	r23
 9b0:	6f 91       	pop	r22
 9b2:	5f 91       	pop	r21
 9b4:	4f 91       	pop	r20
 9b6:	3f 91       	pop	r19
 9b8:	2f 91       	pop	r18
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
 9c4:	1f 92       	push	r1
 9c6:	0f 92       	push	r0
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	0f 92       	push	r0
 9cc:	11 24       	eor	r1, r1
 9ce:	2f 93       	push	r18
 9d0:	3f 93       	push	r19
 9d2:	4f 93       	push	r20
 9d4:	5f 93       	push	r21
 9d6:	6f 93       	push	r22
 9d8:	7f 93       	push	r23
 9da:	8f 93       	push	r24
 9dc:	9f 93       	push	r25
 9de:	af 93       	push	r26
 9e0:	bf 93       	push	r27
 9e2:	ef 93       	push	r30
 9e4:	ff 93       	push	r31
  EE_RDY();
 9e6:	e0 91 93 00 	lds	r30, 0x0093
 9ea:	f0 91 94 00 	lds	r31, 0x0094
 9ee:	09 95       	icall
}
 9f0:	ff 91       	pop	r31
 9f2:	ef 91       	pop	r30
 9f4:	bf 91       	pop	r27
 9f6:	af 91       	pop	r26
 9f8:	9f 91       	pop	r25
 9fa:	8f 91       	pop	r24
 9fc:	7f 91       	pop	r23
 9fe:	6f 91       	pop	r22
 a00:	5f 91       	pop	r21
 a02:	4f 91       	pop	r20
 a04:	3f 91       	pop	r19
 a06:	2f 91       	pop	r18
 a08:	0f 90       	pop	r0
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	0f 90       	pop	r0
 a0e:	1f 90       	pop	r1
 a10:	18 95       	reti

00000a12 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
 a12:	1f 92       	push	r1
 a14:	0f 92       	push	r0
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	0f 92       	push	r0
 a1a:	11 24       	eor	r1, r1
 a1c:	2f 93       	push	r18
 a1e:	3f 93       	push	r19
 a20:	4f 93       	push	r20
 a22:	5f 93       	push	r21
 a24:	6f 93       	push	r22
 a26:	7f 93       	push	r23
 a28:	8f 93       	push	r24
 a2a:	9f 93       	push	r25
 a2c:	af 93       	push	r26
 a2e:	bf 93       	push	r27
 a30:	ef 93       	push	r30
 a32:	ff 93       	push	r31
  ANA_COMP();
 a34:	e0 91 8f 00 	lds	r30, 0x008F
 a38:	f0 91 90 00 	lds	r31, 0x0090
 a3c:	09 95       	icall
}
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	0f 90       	pop	r0
 a5c:	1f 90       	pop	r1
 a5e:	18 95       	reti

00000a60 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
 a60:	1f 92       	push	r1
 a62:	0f 92       	push	r0
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	0f 92       	push	r0
 a68:	11 24       	eor	r1, r1
 a6a:	2f 93       	push	r18
 a6c:	3f 93       	push	r19
 a6e:	4f 93       	push	r20
 a70:	5f 93       	push	r21
 a72:	6f 93       	push	r22
 a74:	7f 93       	push	r23
 a76:	8f 93       	push	r24
 a78:	9f 93       	push	r25
 a7a:	af 93       	push	r26
 a7c:	bf 93       	push	r27
 a7e:	ef 93       	push	r30
 a80:	ff 93       	push	r31
  TWI_I2C();
 a82:	e0 91 81 00 	lds	r30, 0x0081
 a86:	f0 91 82 00 	lds	r31, 0x0082
 a8a:	09 95       	icall
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

00000aae <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
 aae:	1f 92       	push	r1
 ab0:	0f 92       	push	r0
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	0f 92       	push	r0
 ab6:	11 24       	eor	r1, r1
 ab8:	2f 93       	push	r18
 aba:	3f 93       	push	r19
 abc:	4f 93       	push	r20
 abe:	5f 93       	push	r21
 ac0:	6f 93       	push	r22
 ac2:	7f 93       	push	r23
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	af 93       	push	r26
 aca:	bf 93       	push	r27
 acc:	ef 93       	push	r30
 ace:	ff 93       	push	r31
  SPM_RDY();
 ad0:	e0 91 87 00 	lds	r30, 0x0087
 ad4:	f0 91 88 00 	lds	r31, 0x0088
 ad8:	09 95       	icall
}
 ada:	ff 91       	pop	r31
 adc:	ef 91       	pop	r30
 ade:	bf 91       	pop	r27
 ae0:	af 91       	pop	r26
 ae2:	9f 91       	pop	r25
 ae4:	8f 91       	pop	r24
 ae6:	7f 91       	pop	r23
 ae8:	6f 91       	pop	r22
 aea:	5f 91       	pop	r21
 aec:	4f 91       	pop	r20
 aee:	3f 91       	pop	r19
 af0:	2f 91       	pop	r18
 af2:	0f 90       	pop	r0
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	0f 90       	pop	r0
 af8:	1f 90       	pop	r1
 afa:	18 95       	reti

00000afc <main>:
 */ 


#include "Us.h"
int main(void)
{
 afc:	ff cf       	rjmp	.-2      	; 0xafc <main>

00000afe <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{
DIO_init(&US_Configuration);
 afe:	89 e6       	ldi	r24, 0x69	; 105
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
Icu_Init(&ICU_Configuration);
 b06:	83 e6       	ldi	r24, 0x63	; 99
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 28 01 	call	0x250	; 0x250 <Icu_Init>
}
 b0e:	08 95       	ret

00000b10 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{
	
	
	
}
 b10:	08 95       	ret

00000b12 <Us_GetDistance>:
ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{
	
	
	
}
 b12:	08 95       	ret

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
